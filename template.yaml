AWSTemplateFormatVersion: '2010-09-09'
Description: 'Aurora Restore Pipeline Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the Lambda functions will be deployed

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet IDs where the Lambda functions will be deployed

  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: List of security group IDs for the Lambda functions

  DeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment packages

Resources:
  # DynamoDB Table for State Management
  StateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-state
      AttributeDefinitions:
        - AttributeName: operation_id
          AttributeType: S
        - AttributeName: step
          AttributeType: S
      KeySchema:
        - AttributeName: operation_id
          KeyType: HASH
        - AttributeName: step
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  # SNS Topic for Notifications
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-notifications
      DisplayName: !Sub Aurora Restore Notifications - ${Environment}

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AuroraRestorePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:*
                  - dynamodb:*
                  - sns:Publish
                  - secretsmanager:GetSecretValue
                Resource: '*'

  # Lambda Functions
  SnapshotCheckFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-snapshot-check
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: aurora-restore-snapshot-check.zip
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STATE_TABLE_NAME: !Ref StateTable
          SNS_TOPIC_ARN: !Ref NotificationTopic
          ENVIRONMENT: !Ref Environment
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

  CopySnapshotFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-copy-snapshot
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: aurora-restore-copy-snapshot.zip
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STATE_TABLE_NAME: !Ref StateTable
          SNS_TOPIC_ARN: !Ref NotificationTopic
          ENVIRONMENT: !Ref Environment
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

  CheckCopyStatusFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-check-copy-status
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: aurora-restore-check-copy-status.zip
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STATE_TABLE_NAME: !Ref StateTable
          SNS_TOPIC_ARN: !Ref NotificationTopic
          ENVIRONMENT: !Ref Environment
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

  DeleteRdsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-delete-rds
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: aurora-restore-delete-rds.zip
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STATE_TABLE_NAME: !Ref StateTable
          SNS_TOPIC_ARN: !Ref NotificationTopic
          ENVIRONMENT: !Ref Environment
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

  CheckDeleteStatusFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-check-delete-status
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: aurora-restore-check-delete-status.zip
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STATE_TABLE_NAME: !Ref StateTable
          SNS_TOPIC_ARN: !Ref NotificationTopic
          ENVIRONMENT: !Ref Environment
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

  RestoreSnapshotFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-restore-snapshot
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: aurora-restore-restore-snapshot.zip
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STATE_TABLE_NAME: !Ref StateTable
          SNS_TOPIC_ARN: !Ref NotificationTopic
          ENVIRONMENT: !Ref Environment
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

  CheckRestoreStatusFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-check-restore-status
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: aurora-restore-check-restore-status.zip
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STATE_TABLE_NAME: !Ref StateTable
          SNS_TOPIC_ARN: !Ref NotificationTopic
          ENVIRONMENT: !Ref Environment
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

  SetupDbUsersFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-setup-db-users
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: aurora-restore-setup-db-users.zip
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STATE_TABLE_NAME: !Ref StateTable
          SNS_TOPIC_ARN: !Ref NotificationTopic
          ENVIRONMENT: !Ref Environment
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

  SnsNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-sns-notification
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: aurora-restore-sns-notification.zip
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          STATE_TABLE_NAME: !Ref StateTable
          SNS_TOPIC_ARN: !Ref NotificationTopic
          ENVIRONMENT: !Ref Environment
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds

Outputs:
  StateTableName:
    Description: Name of the DynamoDB table for state management
    Value: !Ref StateTable

  StateTableArn:
    Description: ARN of the DynamoDB table for state management
    Value: !GetAtt StateTable.Arn

  NotificationTopicArn:
    Description: ARN of the SNS topic for notifications
    Value: !Ref NotificationTopic

  LambdaRoleArn:
    Description: ARN of the IAM role for Lambda functions
    Value: !GetAtt LambdaExecutionRole.Arn 